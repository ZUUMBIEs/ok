<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Home - Rainbow Social</title>
  <style>
    :root {
      --glow: #fff;
      --bg: #000;
      --text: #fff;
    }
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      background: linear-gradient(270deg, red, orange, yellow, green, cyan, blue, violet);
      background-size: 1400% 1400%;
      animation: rainbowBG 30s ease infinite;
      color: var(--text);
      background-color: var(--bg);
      overflow-x: hidden;
    }
    @keyframes rainbowBG {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }
    .glow-box, .feed-box, .users-box, .profile-box {
      background-color: rgba(0, 0, 0, 0.7);
      box-shadow: 0 0 15px var(--glow);
      border-radius: 10px;
      padding: 1rem;
      margin: 1rem auto;
      max-width: 600px;
    }
    button {
      background: var(--glow);
      color: black;
      padding: 10px;
      border: none;
      width: 100%;
      border-radius: 5px;
      font-weight: bold;
      cursor: pointer;
      margin-top: 10px;
    }
    .user-link {
      cursor: pointer;
      color: #0ff;
      text-decoration: underline;
    }
    img, video {
      max-width: 100%;
      max-height: 400px;
      border-radius: 10px;
      margin-top: 10px;
    }
    .cursor-dot {
      position: absolute;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      pointer-events: none;
      z-index: 9999;
      background: rgba(255, 255, 255, 0.3);
      box-shadow: 0 0 8px rgba(255, 255, 255, 0.4);
    }
    .comment-box {
      background: rgba(255,255,255,0.05);
      padding: 5px;
      border-radius: 5px;
      margin-top: 10px;
    }
  
  body.dark {
    background: linear-gradient(270deg, #330000, #331a00, #333300, #003300, #003333, #000033, #1a0033);
    background-size: 1400% 1400%;
    animation: rainbowBG 30s ease infinite;
    color: white;
  }
  body.dark .glow-box, body.dark .feed-box, body.dark .users-box, body.dark .profile-box {
    background-color: rgba(0, 0, 0, 0.85);
    box-shadow: 0 0 10px #444;
  }
  body.dark input, body.dark textarea, body.dark select {
    background-color: black;
    color: white;
    border: 1px solid #555;
  }
  body.dark button {
    background: #444;
    color: white;
  }


.user-aura-fire { text-shadow: 0 0 6px red, 0 0 12px orange; }
.user-aura-blue { text-shadow: 0 0 6px #00f, 0 0 12px #0ff; }
.user-aura-sparkle {
  position: relative;
}
.user-aura-sparkle::after {
  content: "";
  position: absolute;
  left: -2px; right: -2px; top: -2px; bottom: -2px;
  background: url('https://media.tenor.com/RvlBpzVrvlIAAAAC/stars-sparkle.gif') center/cover;
  z-index: -1;
  border-radius: 5px;
  animation: sparkle 2s linear infinite;
}
@keyframes sparkle {
  0% { opacity: 0.8; }
  50% { opacity: 0.2; }
  100% { opacity: 0.8; }
}
.user-aura-rainbow {
  text-shadow:
    0 0 5px red,
    0 0 10px orange,
    0 0 15px yellow,
    0 0 20px green,
    0 0 25px blue,
    0 0 30px indigo,
    0 0 35px violet;
}

</style>
</head>
<body>


<!-- ======================= MAIN PAGE UI ======================= -->

<!-- ======================= MAIN PAGE UI ======================= -->
<div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 1rem; max-width: 1000px; margin: auto;">
  <div class="glow-box" id="mainPostBox" style="flex: 1; min-width: 280px;">

  <h2>Welcome, <span id="currentUserDisplay"></span> <span id="currentMood"></span></h2>
  
<p>‚≠ê Stars: <span id="starCount">0</span>
  <button onclick="collectDailyStars()" style="margin-left:10px;">üéÅ Daily +100</button>
  <button onclick="location.href='file:///C:/Users/uubun/Downloads/outlines_homepage_button_final.html'">OUTLINES ‚ú®</button>

</p>

<p>Status: <span id="currentStatus"></span> <button onclick="toggleDarkMode()" style="margin-left:10px;">üåì Dark Mode</button></p>
  <input type="text" id="postText" placeholder="Write something or paste a link...">
  <input type="file" id="postMedia" accept="image/*,video/*,image/gif">
  <!-- === Post Box === -->
<button onclick="postContent()">Post</button>
  <!-- === Navigation Buttons === -->
<button onclick="scrollToFeed()">‚¨á Scroll to Feed</button>
    <button onclick="showInbox()">üì• Inbox</button>
    <button onclick="showAdminPanel()">üëë Admin Panel</button>
  <button onclick="showUsers()">üë• Users!</button>


  </div> <!-- end of mainPostBox -->

  <div class="glow-box" id="sideControlBox" style="flex: 1; min-width: 300px;">
    <h3>üë§ Profile & Messaging</h3>

<hr>
<input type="file" id="newPfp" accept="image/*">
<button onclick="updatePfp()">Update Profile Picture</button>
<select id="newMood">
  <option value="">Mood...</option>
  <option value="happy">üòä Happy</option>
  <option value="sad">üò¢ Sad</option>
  <option value="angry">üò† Angry</option>
  <option value="tired">üò¥ Tired</option>
</select>
<input type="text" id="newStatus" placeholder="Update your status">
<button onclick="updateMoodStatus()">Update Mood + Status</button>


</div>


<!-- ======================= MESSAGING SECTION ======================= -->

<!-- ======================= FEED SECTION ======================= -->
<div class="feed-box" id="feed"></div>
<div id="dynamicSpaceAnchor"></div>


<!-- ======================= USERS LIST ======================= -->

<!-- ======================= USERS LIST ======================= -->
<div class="users-box hidden" id="usersList" style="margin-top: 2rem;"></div>



<!-- ======================= INBOX SECTION ======================= -->
<div class="glow-box hidden" id="adminPanel">
  
  <div id="adminUserList"></div>
</div>


<!-- ======================= USER PROFILE ======================= -->

<!-- ======================= USER PROFILE ======================= -->
<div class="profile-box hidden" id="userProfile" style="margin-top: 2rem;"></div>


<script>
  const emojiMap = { happy: 'üòä', sad: 'üò¢', angry: 'üò†', tired: 'üò¥' };
  let postCooldown = 0;
  let users = JSON.parse(localStorage.getItem("users") || "[]");
  let posts = JSON.parse(localStorage.getItem("posts") || "[]");

  function scrollToFeed() {
    document.getElementById("feed").scrollIntoView({ behavior: "smooth" });
  }

  function renderFeed(filterUser = null) {
  const usernameOutlines = JSON.parse(localStorage.getItem("usernameOutlines") || "{}");

    const feed = document.getElementById("feed");
    feed.innerHTML = '<h2>Global Feed</h2>';
    const allUsers = JSON.parse(localStorage.getItem("users") || "[]");
    const filteredPosts = filterUser ? posts.filter(p => p.user === filterUser) : posts;

    if (filteredPosts.length === 0) {
      feed.innerHTML += '<p style="opacity: 0.6;">No posts yet. Be the first to post something!</p>';
      return;
    }

    filteredPosts.forEach((p, i) => {
      const div = document.createElement("div");
      div.className = "post";
      const userObj = allUsers.find(u => u.username === p.user);
      const emoji = emojiMap[userObj?.mood] || "";
      const pfp = userObj?.profilePic ? `<img src="${userObj.profilePic}" style="max-height:50px;border-radius:50%;margin-right:10px;">` : "";
      const adminClass = isAdmin(p.user) ? "admin-glow" : "";

    const outlines = JSON.parse(localStorage.getItem("usernameOutlines") || "{}");
    const outlineClass = outlines[p.user] ? outlines[p.user] : "";

      div.innerHTML = `<p>${pfp}<span class="user-link ${adminClass} ${usernameOutlines[p.user] || ""}" onclick="viewUser('${p.user}')">${p.user}</span> ${emoji}<br>Status: ${userObj?.status || ''}</p><p>${p.text}</p>` +
        (p.media ? (p.type.startsWith("video") ? `<video controls src="${p.media}"></video>` : `<img src="${p.media}">`) : "");
      renderComments(div, i);

      if (isAdmin(localStorage.getItem("currentUser")) || localStorage.getItem("currentUser") === p.user) {
        const btn = document.createElement("button");
        btn.textContent = "üóëÔ∏è Remove Post";
        btn.onclick = () => removePost(i);
        div.appendChild(btn);
      }

      feed.appendChild(div);
    });
  }

  function renderComments(post, postIndex) {
    const commentInput = document.createElement("input");
    commentInput.placeholder = "Add a comment...";
    commentInput.addEventListener("keydown", e => {
      if (e.key === "Enter" && commentInput.value.trim()) {
        let comments = JSON.parse(localStorage.getItem("comments") || "{}");
        if (!comments[postIndex]) comments[postIndex] = [];
        comments[postIndex].push({ user: localStorage.getItem("currentUser"), text: commentInput.value });
        localStorage.setItem("comments", JSON.stringify(comments));
        renderFeed(); updateStarDisplay();
      }
    });
    const comments = JSON.parse(localStorage.getItem("comments") || "{}")[postIndex] || [];
    const commentList = comments.map(c => `<p><b>${c.user}:</b> ${c.text}</p>`).join("");
    const div = document.createElement("div");
    div.className = "comment-box";
    div.innerHTML = commentList;
    div.appendChild(commentInput);
    post.appendChild(div);
  }

  function postContent() {
    if (postCooldown > Date.now()) return alert("Wait 2 minutes between posts.");
    const user = localStorage.getItem("currentUser");
    const text = document.getElementById("postText").value;
    const file = document.getElementById("postMedia").files[0];
    const reader = new FileReader();
    const savePost = (dataUrl = null, type = null) => {
      posts.unshift({ user, text, media: dataUrl, type, time: Date.now() });
      localStorage.setItem("posts", JSON.stringify(posts));
      renderFeed(); updateStarDisplay();
      postCooldown = Date.now() + 120000;
    };
    if (file) { reader.onload = () => savePost(reader.result, file.type); reader.readAsDataURL(file); }
    else savePost();
  }

  function showUsers() {
    const list = document.getElementById("usersList");
    list.classList.toggle("hidden");
    const allUsers = JSON.parse(localStorage.getItem("users") || "[]");
    list.innerHTML = '<h2>All Users</h2>' + allUsers.map(u => {
      const emoji = emojiMap[u.mood] || "";
      return `<p><span class="user-link" onclick="viewUser('${u.username}')">${u.username}</span> ${emoji}<br>Status: ${u.status || ''}</p>`;
    }).join('');
  }

  function viewUser(username) {
    const profile = document.getElementById("userProfile");
    profile.classList.remove("hidden");
    const user = users.find(u => u.username === username);
    const emoji = emojiMap[user?.mood] || "";
    const userPosts = posts.filter(p => p.user === username);
    let html = `<h2>${username} ${emoji}</h2><p>Status: ${user?.status || ''}</p>`;
    if (user?.profilePic) html = `<img src="${user.profilePic}" style="max-height:80px;border-radius:50%;"><br>` + html;
    userPosts.forEach(p => {
      html += `<div class="post"><p>${p.text}</p>${p.media ? (p.type.startsWith("video") ? `<video controls src="${p.media}"></video>` : `<img src="${p.media}">`) : ""}</div>`;
    });
    html += `<button onclick="startDM('${username}')">Message üí¨</button>`;
    profile.innerHTML = html;
    profile.scrollIntoView({ behavior: "smooth" });
  }

  function populateUserList() {
    const select = document.getElementById('recipientSelect');
    const allUsers = JSON.parse(localStorage.getItem("users") || "[]");
    const currentUser = localStorage.getItem("currentUser");
    select.innerHTML = '<option value="">Select user to message</option>' + allUsers
      .filter(u => u.username !== currentUser)
      .map(u => `<option value="${u.username}">${u.username}</option>`).join('');
  }

  function sendMessage() {
    const recipient = document.getElementById("recipientSelect").value;
    const text = document.getElementById("messageInput").value.trim();
    const sender = localStorage.getItem("currentUser");
    if (!recipient || !text) return alert("Recipient and message required.");
    let dm = JSON.parse(localStorage.getItem("dm") || "{}");
    const key = [sender, recipient].sort().join("::");
    if (!dm[key]) dm[key] = [];
    dm[key].push({ from: sender, text });
    localStorage.setItem("dm", JSON.stringify(dm));
    document.getElementById("messageInput").value = "";
    loadMessages();
  }

  function loadMessages() {
    const recipient = document.getElementById("recipientSelect").value;
    const sender = localStorage.getItem("currentUser");
    const key = [sender, recipient].sort().join("::");
    const dm = JSON.parse(localStorage.getItem("dm") || "{}")[key] || [];
    const box = document.getElementById("messagesDisplay");
    box.innerHTML = dm.map(m => `<p><b>${m.from}:</b> ${m.text}</p>`).join("");
  }

  function startDM(username) {
    document.getElementById("recipientSelect").value = username;
    loadMessages();
    document.getElementById("messagingSection").scrollIntoView({ behavior: "smooth" });
  }

  document.getElementById("recipientSelect").addEventListener("change", loadMessages);
  window.addEventListener("load", () => {
    const currentUser = localStorage.getItem("currentUser");
    if (!currentUser) {
      alert("You are not logged in!");
      window.location.href = "index.html";
      return;
    }
    const user = users.find(u => u.username === currentUser);
    document.getElementById("currentUserDisplay").innerText = currentUser;
    document.getElementById("currentMood").innerText = emojiMap[user?.mood] || "";
    document.getElementById("currentStatus").innerText = user?.status || "";
    renderFeed(); updateStarDisplay();
    populateUserList();
  });

  document.addEventListener("mousemove", e => {
    const dot = document.createElement("div");
    dot.className = "cursor-dot";
    dot.style.left = `${e.pageX}px`;
    dot.style.top = `${e.pageY}px`;
    document.body.appendChild(dot);
    setTimeout(() => dot.remove(), 600);
  });

function showInbox() {
  const inbox = document.getElementById("inboxSection");
  const inboxList = document.getElementById("inboxList");
  const currentUser = localStorage.getItem("currentUser");
  const dm = JSON.parse(localStorage.getItem("dm") || "{}");
  const conversations = Object.entries(dm).filter(([k, v]) => k.includes(currentUser));

  inbox.classList.remove("hidden");
  document.getElementById("inboxChat").classList.add("hidden");
  inboxList.innerHTML = "<h3>Your Conversations</h3>" +
    conversations.map(([key]) => {
      const other = key.split("::").find(u => u !== currentUser);
      return `<p><span class='user-link' onclick='openChat("${other}")'>${other}</span></p>`;
    }).join('');
}

function openChat(user) {
  const currentUser = localStorage.getItem("currentUser");
  const key = [currentUser, user].sort().join("::");
  const dm = JSON.parse(localStorage.getItem("dm") || "{}")[key] || [];
  const chatBox = document.getElementById("chatMessages");

  document.getElementById("chatUser").innerText = user;
  document.getElementById("inboxChat").classList.remove("hidden");
  chatBox.innerHTML = dm.map(m => `<p><b>${m.from}:</b> ${m.text}</p>`).join('');
}

function sendReply() {
  const text = document.getElementById("chatInput").value.trim();
  const recipient = document.getElementById("chatUser").innerText;
  const sender = localStorage.getItem("currentUser");
  if (!text) return;

  const key = [sender, recipient].sort().join("::");
  let dm = JSON.parse(localStorage.getItem("dm") || "{}");
  if (!dm[key]) dm[key] = [];
  dm[key].push({ from: sender, text });
  localStorage.setItem("dm", JSON.stringify(dm));
  document.getElementById("chatInput").value = "";
  openChat(recipient);
}


function isAdmin(user) {
  const admins = JSON.parse(localStorage.getItem("admins") || "[]");
  return user === "plibble" || admins.includes(user);
}

function grantAdmin(user) {
  const current = localStorage.getItem("currentUser");
  if (!isAdmin(current)) return alert("You aren't allowed to do that.");
  let admins = JSON.parse(localStorage.getItem("admins") || "[]");
  if (!admins.includes(user)) admins.push(user);
  localStorage.setItem("admins", JSON.stringify(admins));
  alert(user + " is now an admin!");
}

function removeAdmin(user) {
  const current = localStorage.getItem("currentUser");
  if (current !== "plibble") return alert("Only plibble can remove admins.");
  let admins = JSON.parse(localStorage.getItem("admins") || "[]");
  admins = admins.filter(u => u !== user);
  localStorage.setItem("admins", JSON.stringify(admins));
  alert(user + " is no longer an admin.");
}

function deleteUser(user) {
  const current = localStorage.getItem("currentUser");
  if (current !== "plibble") return alert("Only plibble can remove users.");
  let users = JSON.parse(localStorage.getItem("users") || "[]");
  users = users.filter(u => u.username !== user);
  localStorage.setItem("users", JSON.stringify(users));
  alert("User removed.");
}

function renameUser(oldName, newName) {
  if (!/^[a-zA-Z0-9_]+$/.test(newName)) return alert("Invalid name");
  const current = localStorage.getItem("currentUser");
  if (!isAdmin(current)) return alert("Not allowed.");
  let users = JSON.parse(localStorage.getItem("users") || "[]");
  const user = users.find(u => u.username === oldName);
  if (user) user.username = newName;
  localStorage.setItem("users", JSON.stringify(users));
  alert("User renamed.");
}

function removePost(index) {
  const current = localStorage.getItem("currentUser");
  if (!isAdmin(current)) return alert("Only admins can remove posts.");
  let posts = JSON.parse(localStorage.getItem("posts") || "[]");
  posts.splice(index, 1);
  localStorage.setItem("posts", JSON.stringify(posts));
  renderFeed(); updateStarDisplay();
}


function showAdminPanel() {
  const current = localStorage.getItem("currentUser");
  if (!isAdmin(current)) return alert("Access denied.");
  const users = JSON.parse(localStorage.getItem("users") || "[]");
  const admins = JSON.parse(localStorage.getItem("admins") || "[]");
  const panel = document.getElementById("adminPanel");
  const container = document.getElementById("adminUserList");
  panel.classList.remove("hidden");

  container.innerHTML = users.map(u => {
    const isAdmin = u.username === "plibble" ? "üëë" : (admins.includes(u.username) ? "‚≠ê" : "");
    return `
      <div style="border-top:1px solid #fff; padding:10px;">
        <b>${u.username}</b> ${isAdmin}<br>
        Password: ${u.password}<br>
        <input placeholder="Rename..." id="rn_${u.username}">
        <button onclick="renameUser('${u.username}', document.getElementById('rn_${u.username}').value)">Rename</button>
        ${u.username !== 'plibble' ? `
        <button onclick="deleteUser('${u.username}')">Delete</button>
        <button onclick="grantAdmin('${u.username}')">Make Admin</button>
        <button onclick="removeAdmin('${u.username}')">Remove Admin</button>` : ''}
${u.username !== 'plibble' ? `
<button onclick="giveStars('${u.username}', 50)">+50 ‚≠ê</button>
<button onclick="giveStars('${u.username}', 100)">+100 ‚≠ê</button>` : ''}
${current === 'plibble' ? `
<button onclick="giveStars('${u.username}', 500)">üëë +500 ‚≠ê</button>` : ''}

      </div>`;
  }).join('');
}


  // Inject a fake invisible post then delete it quickly to trigger the feed
  window.addEventListener("load", () => {
    const currentUser = localStorage.getItem("currentUser");
    if (!currentUser) {
      alert("You are not logged in!");
      window.location.href = "index.html";
      return;
    }
    const user = users.find(u => u.username === currentUser);
    document.getElementById("currentUserDisplay").innerText = currentUser;
    document.getElementById("currentMood").innerText = emojiMap[user?.mood] || "";
    document.getElementById("currentStatus").innerText = user?.status || "";
    renderFeed(); updateStarDisplay();
    populateUserList();
  });


function toggleDarkMode() {
  document.body.classList.toggle("dark");
  localStorage.setItem("darkMode", document.body.classList.contains("dark") ? "1" : "0");
}
window.addEventListener("load", () => {
  if (localStorage.getItem("darkMode") === "1") {
    document.body.classList.add("dark");
  }
});


function getUserStars(user) {
  const stars = JSON.parse(localStorage.getItem("stars") || "{}");
  return stars[user] || 0;
}

function setUserStars(user, amount) {
  const stars = JSON.parse(localStorage.getItem("stars") || "{}");
  stars[user] = amount;
  localStorage.setItem("stars", JSON.stringify(stars));
}

function updateStarDisplay() {
  const user = localStorage.getItem("currentUser");
  document.getElementById("starCount").innerText = getUserStars(user);
}

function collectDailyStars() {
  const user = localStorage.getItem("currentUser");
  const lastClaim = JSON.parse(localStorage.getItem("dailyLogin") || "{}");
  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000;

  if (lastClaim[user] && now - lastClaim[user] < oneDay) {
    alert("You already collected your daily reward.");
    return;
  }

  setUserStars(user, getUserStars(user) + 100);
  lastClaim[user] = now;
  localStorage.setItem("dailyLogin", JSON.stringify(lastClaim));
  updateStarDisplay();
  alert("+100 Stars!");
}


function giveStars(user, amount) {
  const current = localStorage.getItem("currentUser");
  if (!["plibble", "skid"].includes(current)) return alert("Only plibble or skid can give stars.");
  setUserStars(user, getUserStars(user) + amount);
  alert(user + " received " + amount + "‚≠ê");
}

function giveStars(targetUser, amount) {
  const stars = JSON.parse(localStorage.getItem("stars") || "{}");
  const currentUser = localStorage.getItem("currentUser");
  if (!stars[currentUser]) stars[currentUser] = 0;
  if (!stars[targetUser]) stars[targetUser] = 0;

  if (stars[currentUser] < amount) {
    alert("Not enough stars to give!");
    return;
  }

  stars[currentUser] -= amount;
  stars[targetUser] += amount;
  localStorage.setItem("stars", JSON.stringify(stars));
  alert(`‚≠ê You gave ${amount} stars to ${targetUser}!`);
}

function addFriend(targetUser) {
  const currentUser = localStorage.getItem("currentUser");
  const allFriends = JSON.parse(localStorage.getItem("friends") || "{}");
  if (!allFriends[currentUser]) allFriends[currentUser] = [];

  if (!allFriends[currentUser].includes(targetUser)) {
    allFriends[currentUser].push(targetUser);
    localStorage.setItem("friends", JSON.stringify(allFriends));
    alert(`‚úÖ ${targetUser} has been added as a friend!`);
  } else {
    alert(`${targetUser} is already your friend.`);
  }
}

</script>


<script>
function updatePfp() {
  const file = document.getElementById("newPfp").files[0];
  const reader = new FileReader();
  const currentUser = localStorage.getItem("currentUser");
  reader.onload = () => {
    let users = JSON.parse(localStorage.getItem("users") || "[]");
    const user = users.find(u => u.username === currentUser);
    if (user) user.profilePic = reader.result;
    localStorage.setItem("users", JSON.stringify(users));
    alert("Profile picture updated!");
    location.reload();
  };
  if (file) reader.readAsDataURL(file);
}

function updateMoodStatus() {
  const mood = document.getElementById("newMood").value;
  const status = document.getElementById("newStatus").value;
  const currentUser = localStorage.getItem("currentUser");
  let users = JSON.parse(localStorage.getItem("users") || "[]");
  const user = users.find(u => u.username === currentUser);
  if (user) {
    if (mood) user.mood = mood;
    if (status) user.status = status;
    localStorage.setItem("users", JSON.stringify(users));
    alert("Mood and status updated!");
    location.reload();
  }
}

  // Inject a fake invisible post then delete it quickly to trigger the feed
  window.addEventListener("load", () => {
    const currentUser = localStorage.getItem("currentUser");
    if (!currentUser) {
      alert("You are not logged in!");
      window.location.href = "index.html";
      return;
    }
    const user = users.find(u => u.username === currentUser);
    document.getElementById("currentUserDisplay").innerText = currentUser;
    document.getElementById("currentMood").innerText = emojiMap[user?.mood] || "";
    document.getElementById("currentStatus").innerText = user?.status || "";
    renderFeed(); updateStarDisplay();
    populateUserList();
  });


function toggleDarkMode() {
  document.body.classList.toggle("dark");
  localStorage.setItem("darkMode", document.body.classList.contains("dark") ? "1" : "0");
}
window.addEventListener("load", () => {
  if (localStorage.getItem("darkMode") === "1") {
    document.body.classList.add("dark");
  }
});


function getUserStars(user) {
  const stars = JSON.parse(localStorage.getItem("stars") || "{}");
  return stars[user] || 0;
}

function setUserStars(user, amount) {
  const stars = JSON.parse(localStorage.getItem("stars") || "{}");
  stars[user] = amount;
  localStorage.setItem("stars", JSON.stringify(stars));
}

function updateStarDisplay() {
  const user = localStorage.getItem("currentUser");
  document.getElementById("starCount").innerText = getUserStars(user);
}

function collectDailyStars() {
  const user = localStorage.getItem("currentUser");
  const lastClaim = JSON.parse(localStorage.getItem("dailyLogin") || "{}");
  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000;

  if (lastClaim[user] && now - lastClaim[user] < oneDay) {
    alert("You already collected your daily reward.");
    return;
  }

  setUserStars(user, getUserStars(user) + 100);
  lastClaim[user] = now;
  localStorage.setItem("dailyLogin", JSON.stringify(lastClaim));
  updateStarDisplay();
  alert("+100 Stars!");
}


function giveStars(user, amount) {
  const current = localStorage.getItem("currentUser");
  if (!["plibble", "skid"].includes(current)) return alert("Only plibble or skid can give stars.");
  setUserStars(user, getUserStars(user) + amount);
  alert(user + " received " + amount + "‚≠ê");
}

function giveStars(targetUser, amount) {
  const stars = JSON.parse(localStorage.getItem("stars") || "{}");
  const currentUser = localStorage.getItem("currentUser");
  if (!stars[currentUser]) stars[currentUser] = 0;
  if (!stars[targetUser]) stars[targetUser] = 0;

  if (stars[currentUser] < amount) {
    alert("Not enough stars to give!");
    return;
  }

  stars[currentUser] -= amount;
  stars[targetUser] += amount;
  localStorage.setItem("stars", JSON.stringify(stars));
  alert(`‚≠ê You gave ${amount} stars to ${targetUser}!`);
}

function addFriend(targetUser) {
  const currentUser = localStorage.getItem("currentUser");
  const allFriends = JSON.parse(localStorage.getItem("friends") || "{}");
  if (!allFriends[currentUser]) allFriends[currentUser] = [];

  if (!allFriends[currentUser].includes(targetUser)) {
    allFriends[currentUser].push(targetUser);
    localStorage.setItem("friends", JSON.stringify(allFriends));
    alert(`‚úÖ ${targetUser} has been added as a friend!`);
  } else {
    alert(`${targetUser} is already your friend.`);
  }
}

</script>


<div style="margin-top: 20px; text-align: center;">
  <button onclick="playGlobalMusic()" style="padding: 10px 20px; font-weight: bold;">‚ñ∂Ô∏è Play Music</button>
  <div id="musicPlayer" style="margin-top: 15px;"></div>
</div>

</body>

<script>
function playGlobalMusic() {
  const approved = JSON.parse(localStorage.getItem("playlistApproved") || "[]");
  const musicPlayer = document.getElementById("musicPlayer");

  if (approved.length === 0) {
    alert("‚ö†Ô∏è No approved music in the global playlist yet.");
    return;
  }

  const pick = approved[Math.floor(Math.random() * approved.length)];
  const id = pick.split("v=")[1].split("&")[0];

  musicPlayer.innerHTML = `<iframe width="0" height="0" src="https://www.youtube.com/embed/${id}?autoplay=1&loop=1&playlist=${id}" frameborder="0" allow="autoplay" allowfullscreen></iframe>`;
}
</script>


<script>
function playGlobalMusic() {
  const approved = JSON.parse(localStorage.getItem("playlistApproved") || "[]");
  const musicPlayer = document.getElementById("musicPlayer");

  if (approved.length === 0) {
    alert("‚ö†Ô∏è No approved music in the global playlist yet.");
    return;
  }

  const pick = approved[Math.floor(Math.random() * approved.length)];
  const id = pick.split("v=")[1].split("&")[0];

  musicPlayer.innerHTML = `<iframe width="0" height="0" src="https://www.youtube.com/embed/${id}?autoplay=1&loop=1&playlist=${id}" frameborder="0" allow="autoplay" allowfullscreen></iframe>`;
}

function submitGlobalTrack() {
  const input = document.getElementById("newMusicLink");
  const link = input.value.trim();
  if (!link.includes("youtube.com/watch?v=")) {
    alert("‚ö†Ô∏è Invalid YouTube link.");
    return;
  }
  const pending = JSON.parse(localStorage.getItem("playlistPending") || "[]");
  pending.push(link);
  localStorage.setItem("playlistPending", JSON.stringify(pending));
  input.value = "";
  alert("‚úÖ Submitted for approval!");
}
</script>

</html>
